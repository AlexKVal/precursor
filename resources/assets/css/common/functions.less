.for(@i, @n) {.-each(@i)}
.for(@n)     when (isnumber(@n)) {.for(1, @n)}
.for(@i, @n) when not (@i = @n)  {
    .for((@i + (@n - @i) / abs(@n - @i)), @n);
}
.for(@array)   when (default()) {.for-impl_(length(@array))}
.for-impl_(@i) when (@i > 1)    {.for-impl_((@i - 1))}
.for-impl_(@i) when (@i > 0)    {.-each(extract(@array, @i))}

.prefixer(@property; @value; @rest...) {
  .prefix(@property; @value; @rest; @counter: length(@rest)) when (@counter > 0) {
    .prefix(@property; @value; @rest; (@counter - 1));
    @prefix: extract(@rest, @counter);
    -@{prefix}-@{property}: @value;
  }.prefix(@property; @value; @rest);
  @{property}: @value;
}
.placeholder_style(@property; @value) {
  &::-webkit-input-placeholder {@{property}: @value;}
  &:-moz-placeholder           {@{property}: @value;}
  &::-moz-placeholder          {@{property}: @value;}
}
.box-sizing(...) {
  .prefixer(box-sizing, @arguments, webkit moz);
}
.user-select(...) {
  .prefixer(user-select, @arguments, webkit moz);
}
.to_em(@a) when (ispixel(@a)) {
  @concat: (unit(@a) / unit(@font_size));
  @to_em: ~"@{concat}em";
}
.button_icon_cascade(@c) when (@c > 0) {
  .button_icon_cascade((@c - 1));
  &:nth-of-type(@{c}) {
    i {
      transition-delay: (@cascade * @c);
    }
  }
}
.button_fade_cascade(@c) when (@c > 0) {
  .button_fade_cascade((@c - 1));
  &:nth-of-type(@{c}) {
    object {
      transition-delay: (@cascade * 5) + (@cascade * @c);
    }
  }
}
.outline(@color: @gray_lighter) {
  box-shadow+:  0    1px @color;
  box-shadow+:  0   -1px @color;
  box-shadow+:  1px  0   @color;
  box-shadow+: -1px  0   @color;
}
.rotate(...) {
  .prefixer(transform; ~"rotate(@{arguments}deg)"; webkit);
}
.scale(...) {
  .prefixer(transform, scale(@arguments), webkit);
}
.scale3d(@x; @y: @x; @z: 1;) {
  .prefixer(transform, scale3d(@x, @y, @z), webkit);
}
.translate(...) {
  .prefixer(transform, translate(@arguments), webkit);
}
.translate3d(@x; @y: @x; @z: 1;) {
  .prefixer(transform, translate3d(@x, @y, @z), webkit);
}
.translateZ(...) {
  .prefixer(transform, translateZ(@arguments), webkit);
}
.transform-origin(...) {
  .prefixer(transform-origin, @arguments, webkit);
}
.transform(...) {
  .for(@arguments); .-each(@argument) {
      -webkit-transform+_: @argument;
              transform+_: @argument;
  }
}
