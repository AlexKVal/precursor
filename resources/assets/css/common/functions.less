.for(@i, @n) {.-each(@i)}
.for(@n)     when (isnumber(@n)) {.for(1, @n)}
.for(@i, @n) when not (@i = @n)  {
    .for((@i + (@n - @i) / abs(@n - @i)), @n);
}
.for(@array)   when (default()) {.for-impl_(length(@array))}
.for-impl_(@i) when (@i > 1)    {.for-impl_((@i - 1))}
.for-impl_(@i) when (@i > 0)    {.-each(extract(@array, @i))}

.prefixer(@property; @value; @rest...) {
  .prefix(@property; @value; @rest; @counter: length(@rest)) when (@counter > 0) {
    .prefix(@property; @value; @rest; (@counter - 1));
    @prefix: extract(@rest, @counter);
    -@{prefix}-@{property}: @value;
  }.prefix(@property; @value; @rest);
  @{property}: @value;
}
.prefixer_value(@property; @value; @rest...) {
  .prefix(@property; @value; @rest; @counter: length(@rest)) when (@counter > 0) {
    .prefix(@property; @value; @rest; (@counter - 1));
    @prefix: extract(@rest, @counter);
    @{property}: ~"-@{prefix}-@{value}";
  }.prefix(@property; @value; @rest);
  @{property}: @value;
}
.position(@p; @x; @y) {
  position: @p;
  .axis_y(@y) when (length(@y) = 1) {
    top: @y;
  }.axis_y(@y);
  .axis_y(@y) when (length(@y) = 2) {
    @property: extract(@y, 1);
    @{property}: extract(@y, 2);
  }.axis_y(@y);
  .axis_x(@x) when (length(@x) = 1) {
    left: @x;
  }.axis_x(@x);
  .axis_x(@x) when (length(@x) = 2) {
    @property: extract(@x, 1);
    @{property}: extract(@x, 2);
  }.axis_x(@x);
}
.selection(@color, @opacity) {
  ::-moz-selection {
    color: @color;
    background: fade(@color, @opacity);
    text-shadow: none;
  }
  ::selection {
    color: @color;
    background: fade(@color, @opacity);
    text-shadow: none;
  }
}
.placeholder_style(@property; @value) {
  &::-webkit-input-placeholder {@{property}: @value;}
  &:-moz-placeholder           {@{property}: @value;}
  &::-moz-placeholder          {@{property}: @value;}
}
.scrollbar(@property; @value) {
  &::-webkit-scrollbar {
    @{property}: @value;
  }
}
.scrollbar_thumb(@property; @value) {
  &::-webkit-scrollbar-thumb {
    @{property}: @value;
  }
}
.scrollbar_hide() {
  &::-webkit-scrollbar {
    width: 0; // we should calculate to get this effect in the dom
  }
}
.icon(@type; @value) {
  .iconpile {
    .stroke(@type; @value) when (@type = stroke) {
      [class|="stroke"] {
        .width(@value) when (isnumber(@value)){stroke-width:@value;}.width(@value);
        .color(@value) when  (iscolor(@value)){stroke:      @value;}.color(@value);
      }
    }.stroke(@type; @value);
    .fill(@type; @value) when (@type = fill) {
      [class|="fill"] {
        // .width(@value) when (isnumber(@a)) { stroke-width: @value; }.width(@value);
        .color(@value) when (iscolor(@value))  { fill: @value; }.color(@value);
      }
    }.fill(@type; @value);
  }
}
.box-sizing(...) {
  .prefixer(box-sizing, @arguments, webkit moz);
}
.user-select(...) {
  .prefixer(user-select, @arguments, webkit moz);
}
.to_em(@a) when (ispixel(@a)) {
  @concat: (unit(@a) / unit(@font_size));
  @to_em: ~"@{concat}em";
}
.random_cascade(@c) when (@c > 0) {
  .random_cascade((@c - 1));
  @random: `Math.random()`;
  &:nth-of-type(@{c}) {
    transition-delay: round(@run_faster * (@random * 10));
  }
}
.button_icon_cascade(@c) when (@c > 0) {
  .button_icon_cascade((@c - 1));
  &:nth-of-type(@{c}) {
    i {
      transition-delay: (@run_faster * @c);
    }
  }
}
.button_fade_cascade(@c) when (@c > 0) {
  .button_fade_cascade((@c - 1));
  &:nth-of-type(@{c}) {
    object {
      transition-delay: (@run_faster * 5) + (@run_faster * @c);
    }
  }
}
.transition_cascade(@c) when (@c > 0) {
  .transition_cascade((@c - 1));
  &:nth-child(@{c}) {
    transition-delay: @run_faster * @c;
  }
}
.animation_cascade(@c) when (@c > 0) {
  .animation_cascade((@c - 1));
  &:nth-child(@{c}) {
    .animation-delay((@run_faster * @c));
  }
}
.outline(@color: @gray_lighter) {
  box-shadow+:  0    1px @color;
  box-shadow+:  0   -1px @color;
  box-shadow+:  1px  0   @color;
  box-shadow+: -1px  0   @color;
}
.inline(@color: @gray_lighter; @width: 1px) {
  box-shadow+:  0    @width @color inset;
  box-shadow+:  0   -@width @color inset;
  box-shadow+:  @width  0   @color inset;
  box-shadow+: -@width  0   @color inset;
}
.filter(...) {
  .for(@arguments); .-each(@argument) {
      -webkit-filter+_: @argument;
              filter+_: @argument;
  }
}
.shadow_inset(@position; @black; @white) {
  .top(@arguments) when (@position = top) {
    box-shadow+: 0 -1px @black;
    box-shadow+: 0  1px @white inset;
  }.top(@arguments);
  .btm(@arguments) when (@position = bottom) {
    box-shadow+: 0 -1px @black inset;
    box-shadow+: 0  1px @white;
  }.btm(@arguments);
}
.gradient(@type; @rest...) {
  @colors: ~`"@{rest}".slice(1,-1)`;
  background-image+: linear-gradient(@type, @colors);
}
.font-smoothing(@a: antialiased) {
  .aa(@a) when (@a = antialiased) {
    -webkit-font-smoothing: @a;
    -moz-osx-font-smoothing: grayscale;
  }.aa(@a);
}
.transition_transform(...) {
  -webkit-transition+: -webkit-transform @arguments;
          transition+:         transform @arguments;
}
.rotate(...) {
  .prefixer(transform; ~"rotate(@{arguments}deg)"; webkit);
}
.scale(@x; @y: @x) {
  .prefixer(transform, scale(@x, @y), webkit);
}
.scale3d(@x; @y: @x; @z: 1) {
  .prefixer(transform, scale3d(@x, @y, @z), webkit);
}
.translate(@x; @y: @x) {
  .prefixer(transform, translate(@x, @y), webkit);
}
.translate3d(@x; @y: @x; @z: 1) {
  .prefixer(transform, translate3d(@x, @y, @z), webkit);
}
.translateZ(...) {
  .prefixer(transform, translateZ(@arguments), webkit);
}
.transform-origin(...) {
  .prefixer(transform-origin, @arguments, webkit);
}
.transform(...) {
  .for(@arguments); .-each(@argument) {
      -webkit-transform+_: @argument;
              transform+_: @argument;
  }
}
.animation(...) {
  -webkit-animation: @arguments;
          animation: @arguments;
}
.animation-name(...) {
  -webkit-animation-name: @arguments;
          animation-name: @arguments;
}
.animation-duration(...) {
  -webkit-animation-duration: @arguments;
          animation-duration: @arguments;
}
.animation-delay(...) {
  -webkit-animation-delay: @arguments;
          animation-delay: @arguments;
}
.animation-fill-mode(...) {
  -webkit-animation-fill-mode: @arguments;
          animation-fill-mode: @arguments;
}
.animation-timing-function(...) {
  -webkit-animation-timing-function: @arguments;
          animation-timing-function: @arguments;
}
.animation-bezier(...) {
  -webkit-animation-timing-function: @arguments;
          animation-timing-function: @arguments;
}
//
// positions icons in radial menu
//
.shape_position(@array; @count: length(@array); @name_value: -2; @x_value: -1; @y_value: 0; @icon_scale: .2) when (@count > (length(@array) / 3)) {
  .shape_position(@array; (@count - 2); (@name_value - 1); (@x_value - 1); (@y_value - 1); @icon_scale);    // <-- Loop to next iteration until count is 0
  @name:     extract(@array, (@count + @name_value));                                                       //
  @x_offset: extract(@array, (@count + @x_value)) * (1 / @icon_scale);                                      //
  @y_offset: extract(@array, (@count + @y_value)) * (1 / @icon_scale);                                      //
  &.shape-@{name} {.transform(scale3d(@icon_scale, @icon_scale, 1); translate3d(@x_offset, @y_offset, 0));} // <-- Actual style to written for each array item
}
//
// animates hud buttons when app loads
//
.hud_toggle_animation(...) {
  .animation(~"in-fade-@{arguments}" @run_slow);
}
//
// responsive width sizes for chat
//
.chat_width(...) {
  width: @size_chat;
  .mq_1920({ width: @chat_1920; });
  .mq_1600({ width: @chat_1600; });
  .mq_1280({ width: @chat_1280; });
  .mq_960({  width: @chat_0960;  });
  .chat(@a) when not (@a = menu) {
    min-width: @tile;
    max-width: calc(~"100% -" @tile);
    .mq_640({ width: @chat_0640;});
  }.chat(@arguments);
  .menu(@a) when (@a = menu) {
    .mq_640({ width: 100%; });
  }.menu(@arguments);
}
//
// transform canvas when left/right menu is active
//
.canvas_off(...) {
  .left(@a) when not (@a = left) {
    @init: 5%;
    @1920: @canvas_pull_1920;
    @1600: @canvas_pull_1600;
    @1280: @canvas_pull_1280;
    @0960: @canvas_pull_0960;
    @0640: 100%;
  }.left(@arguments);
  .right(@a) when (@a = left) {
    @init: -5%;
    @1920: -@canvas_pull_1920;
    @1600: -@canvas_pull_1600;
    @1280: -@canvas_pull_1280;
    @0960: -@canvas_pull_0960;
    @0640: -100%;
  }.right(@arguments);
  .inner {
    .transform(translate3d(@init, 0, 0); scale3d(.8, .8, 1));
    .transform-origin(@arguments);
    @{arguments}: 0;
    .mq_1920({ .transform(translate3d(@1920, 0, 0) scale3d(.8, .8, 1)); });
    .mq_1600({ .transform(translate3d(@1600, 0, 0) scale3d(.8, .8, 1)); });
    .mq_1280({ .transform(translate3d(@1280, 0, 0) scale3d(.8, .8, 1)); });
     .mq_960({ .transform(translate3d(@0960, 0, 0) scale3d(.8, .8, 1)); });
     .mq_640({ .transform(translate3d(@0640, 0, 0) scale3d(.8, .8, 1)); });
  }
}
