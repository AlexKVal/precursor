.for(@i, @n) {.-each(@i)}
.for(@n)     when (isnumber(@n)) {.for(1, @n)}
.for(@i, @n) when not (@i = @n)  {
    .for((@i + (@n - @i) / abs(@n - @i)), @n);
}
.for(@array)   when (default()) {.for-impl_(length(@array))}
.for-impl_(@i) when (@i > 1)    {.for-impl_((@i - 1))}
.for-impl_(@i) when (@i > 0)    {.-each(extract(@array, @i))}
.position(@p; @x; @y) {
  position: @p;
  .axis_y(@y) when (length(@y) = 1) {
    top: @y;
  }.axis_y(@y);
  .axis_y(@y) when (length(@y) = 2) {
    @property: extract(@y, 1);
    @{property}: extract(@y, 2);
  }.axis_y(@y);
  .axis_x(@x) when (length(@x) = 1) {
    left: @x;
  }.axis_x(@x);
  .axis_x(@x) when (length(@x) = 2) {
    @property: extract(@x, 1);
    @{property}: extract(@x, 2);
  }.axis_x(@x);
}
.selection(@color, @opacity) {
  ::selection {
    color: @color;
    background: fade(@color, @opacity);
    text-shadow: none;
  }
}
.placeholder_style(@property; @value) {
  &::-webkit-input-placeholder {@{property}: @value;} //
  &:-moz-placeholder           {@{property}: @value;} // non-standard prefix
  &::-moz-placeholder          {@{property}: @value;} //
}
.scrollbar(...) {
  &::-webkit-scrollbar { // non-standard prefix
    @arguments();
  }
}
.scrollbar_thumb(...) {
  &::-webkit-scrollbar-thumb { // non-standard prefix
    @arguments();
  }
}
.scrollbar_inner() {
                  .scrollbar({ width: .5em;                     });
            .scrollbar_thumb({ border: .125em solid @dye_inner; });
  &:hover { .scrollbar_thumb({ background: @gray_dark;          }); }
}
.icon(@type; @value) {
  .iconpile {
    .stroke(@type; @value) when (@type = stroke) {
      [class|="stroke"] {
        .width(@value) when (isnumber(@value)) {stroke-width: @value;}.width(@value);
        .color(@value) when  (iscolor(@value)) {stroke:       @value;}.color(@value);
      }
    }.stroke(@type; @value);
    .fill(@type; @value) when (@type = fill) {
      [class|="fill"] {
        .color(@value) when (iscolor(@value)) {fill: @value;}.color(@value);
      }
    }.fill(@type; @value);
  }
}
.to_em(@a) when (ispixel(@a)) {
  @concat: (unit(@a) / unit(@font_size));
  @to_em: ~"@{concat}em";
}
.random_cascade(@c) when (@c > 0) {
  .random_cascade((@c - 1));
  @random: `Math.random()`;
  &:nth-of-type(@{c}) {
    transition-delay: round(@run_faster * (@random * 10));
  }
}
.button_icon_cascade(@c) when (@c > 0) {
  .button_icon_cascade((@c - 1));
  &:nth-of-type(@{c}) {
    i {
      transition-delay: (@run_faster * @c);
    }
  }
}
.button_fade_cascade(@c) when (@c > 0) {
  .button_fade_cascade((@c - 1));
  &:nth-of-type(@{c}) {
    object {
      transition-delay: (@run_faster * 5) + (@run_faster * @c);
    }
  }
}
.transition_cascade(@c) when (@c > 0) {
  .transition_cascade((@c - 1));
  &:nth-child(@{c}) {
    transition-delay: @run_faster * @c;
  }
}
.animation_cascade(@c) when (@c > 0) {
  .animation_cascade((@c - 1));
  &:nth-child(@{c}) {
    animation-delay: @run_faster * @c;
  }
}
.outline(@color: @gray_lighter) {
  box-shadow+:  0    1px @color;
  box-shadow+:  0   -1px @color;
  box-shadow+:  1px  0   @color;
  box-shadow+: -1px  0   @color;
}
.inline(@color: @gray_lighter; @width: 1px) {
  box-shadow+:  0    @width @color inset;
  box-shadow+:  0   -@width @color inset;
  box-shadow+:  @width  0   @color inset;
  box-shadow+: -@width  0   @color inset;
}
.shadow_inset(@position; @black; @white) {
  .top(@arguments) when (@position = top) {
    box-shadow+: 0 -1px @black;
    box-shadow+: 0  1px @white inset;
  }.top(@arguments);
  .btm(@arguments) when (@position = bottom) {
    box-shadow+: 0 -1px @black inset;
    box-shadow+: 0  1px @white;
  }.btm(@arguments);
}
.gradient(@type; @rest...) {
  @colors: ~`"@{rest}".slice(1,-1)`;
  background-image+: linear-gradient(@type, @colors);
}
.font-smoothing(@a: antialiased) {
  .aa(@a) when (@a = antialiased) {
    -webkit-font-smoothing: @a;         // non-standard prefix
    -moz-osx-font-smoothing: grayscale; //
  }.aa(@a);
}
.h1() {
  font-size: 4.0em;
  font-weight: 300;
  line-height: 1.25;
  .mq_640({
    font-size: 3.0em;
  });
}
.h2() {
  font-size: 2em + (2 * (1 / 3));
  font-weight: 300;
  line-height: 1.5;
  .mq_640({
    font-size: 2.0em;
  });
}
.h3() {
  font-size: 2.0em;
  line-height: 1 + (1 / 3);
  font-weight: 400;
  .mq_640({
    font-size: 1.5em;
  });
}
.h4() {
  font-size: 1.5em;
  line-height: 1 + (1 / 3);
  font-weight: 400;
}
.h5() {
  font-size: 1.0em;
  line-height: 1.5;
  font-weight: 400;
}
.h6() {
  font-size: .75em;
  line-height: 1.5;
  font-weight: 400;
}
//
// positions icons in radial menu
//
.shape_position(@array; @count: length(@array); @name_value: -2; @x_value: -1; @y_value: 0; @icon_scale: .2) when (@count > (length(@array) / 3)) {
  .shape_position(@array; (@count - 2); (@name_value - 1); (@x_value - 1); (@y_value - 1); @icon_scale);    // <-- Loop to next iteration until count is 0
  @name:     extract(@array, (@count + @name_value));                                                       //
  @x_offset: extract(@array, (@count + @x_value)) * (1 / @icon_scale);                                      //
  @y_offset: extract(@array, (@count + @y_value)) * (1 / @icon_scale);                                      //
  &.shape-@{name} {transform: scale3d(@icon_scale, @icon_scale, 1) translate3d(@x_offset, @y_offset, 0);} // <-- Actual style to written for each array item
}
//
// animates hud buttons when app loads
//
.hud_toggle_animation(...) {
  animation: ~"in-fade-@{arguments}" @run_slow;
}
//
// morph menu icon into close/back icon
//
.hud_menu_morph() {
  &.close,
  &.back {
    transform: scale3d(.75, .75, 1);
  }
  &.close {
    .stroke-menu-top { transform: translate3d(  32.32px, -3.03px, 0) rotate3d(0, 0, 1,  45deg);}
    .stroke-menu-mid { transform: translate3d( -20.71px,    50px, 0) rotate3d(0, 0, 1, -45deg); opacity: 0;}
    .stroke-menu-btm { transform: translate3d( -38.39px, 32.32px, 0) rotate3d(0, 0, 1, -45deg);}
  }
  &.back {
    .stroke-menu-top { transform: translate3d(  20px, 28px, 0) rotate3d(0, 0, 1,  45deg) scale3d(.5, 1, 1);}
    .stroke-menu-mid { transform: translate3d(     0,    0, 0) rotate3d(0, 0, 0, -45deg) scale3d( 1, 1, 1);}
    .stroke-menu-btm { transform: translate3d( -51px,  1px, 0) rotate3d(0, 0, 1, -45deg) scale3d(.5, 1, 1);}
  }
}
//
// canvas/chat sizes w/ media queries
//
// For Example: .size_of(chat; width);
// Compiles To: width: 25%;
//
// For Example: .size_of(canvas; padding-left; vh);
// Compiles To: padding-left: 75vh;
//
.size_of(@object; @property; @unit...) {
  .view_width(@unit) when (@unit = vw) {
    @1: 100vw;
    @0: 0vw;
  }.view_width(@unit);
  .view_height(@unit) when (@unit = vh) {
    @1: 100vh;
    @0: 0vh;
  }.view_height(@unit);
  .percentage(@unit) when not (@unit = vw), (@unit = vw) {
    @1: 100%;
    @0: 0%;
  }.percentage(@unit);
  .if_width(@property) when (@property = width), (@property = height) {
    .if_chat(@object) when (@object = chat) {
      @value: @0;
    }.if_chat(@object);
    .if_canvas(@object) when (@object = canvas) {
      @value: @1;
    }.if_canvas(@object);
  }.if_width(@property);
  .no_width(@property) when not (@property = width), (@property = height) {
    .if_chat(@object) when (@object = chat) {
      @value: @1;
    }.if_chat(@object);
    .if_canvas(@object) when (@object = canvas) {
      @value: @0;
    }.if_canvas(@object);
  }.no_width(@property);
  @{property}: abs(@value - @size_chat);
  .mq_1920({@{property}: abs(@value - @chat_1920);});
  .mq_1600({@{property}: abs(@value - @chat_1600);});
  .mq_1280({@{property}: abs(@value - @chat_1280);});
  .mq_960({ @{property}: abs(@value - @chat_0960);});
  .mq_640({ @{property}: abs(@value - @chat_0640);});
}
//
// transform canvas when left/right menu is active
//
.canvas_off(...) {
  .left(@a) when not (@a = left) {
    @init: 5% + 10;
    @1920: @canvas_pull_1920 + 10;
    @1600: @canvas_pull_1600 + 10;
    @1280: @canvas_pull_1280 + 10;
    @0960: @canvas_pull_0960 + 10;
    @0640: @canvas_pull_0640 + 10;
  }.left(@arguments);
  .right(@a) when (@a = left) {
    @init: -5% - 10;
    @1920: -@canvas_pull_1920 - 10;
    @1600: -@canvas_pull_1600 - 10;
    @1280: -@canvas_pull_1280 - 10;
    @0960: -@canvas_pull_0960 - 10;
    @0640: -@canvas_pull_0640 - 10;
  }.right(@arguments);
  .inner {
     transform: scale(.8);
     margin-left: @init;
     .mq_1920({ margin-left: @1920;});
     .mq_1600({ margin-left: @1600;});
     .mq_1280({ margin-left: @1280;});
      .mq_960({ margin-left: @0960;});
      .mq_640({ margin-left: @0640;});
  }
}
.shadow_canvas(@state: default) {
  @shadow: fade(@black, (100 * @opacity_white_light));
  .inline(@gray_lightest);
  .default(@state) when (@state = default) {
    box-shadow+: 0 8px 21px 0 @shadow;
  }.default(@state);
  .hover(@state) when (@state = hover) {
    box-shadow+: 0 21px 34px 0 @shadow;
  }.hover(@state);
  .active(@state) when (@state = active) {
    box-shadow+: 0 5px 13px 0 @shadow;
  }.active(@state);
}
