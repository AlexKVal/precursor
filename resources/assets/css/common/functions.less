.for(@i, @n) {.-each(@i)}
.for(@n)     when (isnumber(@n)) {.for(1, @n)}
.for(@i, @n) when not (@i = @n)  {
    .for((@i + (@n - @i) / abs(@n - @i)), @n);
}
.for(@array)   when (default()) {.for-impl_(length(@array))}
.for-impl_(@i) when (@i > 1)    {.for-impl_((@i - 1))}
.for-impl_(@i) when (@i > 0)    {.-each(extract(@array, @i))}

.prefixer(@property; @value; @rest...) {
  .prefix(@property; @value; @rest; @counter: length(@rest)) when (@counter > 0) {
    .prefix(@property; @value; @rest; (@counter - 1));
    @prefix: extract(@rest, @counter);
    -@{prefix}-@{property}: @value;
  }.prefix(@property; @value; @rest);
  @{property}: @value;
}
.placeholder_style(@property; @value) {
  &::-webkit-input-placeholder {@{property}: @value;}
  &:-moz-placeholder           {@{property}: @value;}
  &::-moz-placeholder          {@{property}: @value;}
}
.box-sizing(...) {
  .prefixer(box-sizing, @arguments, webkit moz);
}
.user-select(...) {
  .prefixer(user-select, @arguments, webkit moz);
}
.to_em(@a) when (ispixel(@a)) {
  @concat: (unit(@a) / unit(@font_size));
  @to_em: ~"@{concat}em";
}
.random_cascade(@c) when (@c > 0) {
  .random_cascade((@c - 1));
  @random: `Math.random()`;
  &:nth-of-type(@{c}) {
    transition-delay: round(@cascade * (@random * 10));
  }
}
.button_icon_cascade(@c) when (@c > 0) {
  .button_icon_cascade((@c - 1));
  &:nth-of-type(@{c}) {
    i {
      transition-delay: (@cascade * @c);
    }
  }
}
.button_fade_cascade(@c) when (@c > 0) {
  .button_fade_cascade((@c - 1));
  &:nth-of-type(@{c}) {
    object {
      transition-delay: (@cascade * 5) + (@cascade * @c);
    }
  }
}
.outline(@color: @gray_lighter) {
  box-shadow+:  0    1px @color;
  box-shadow+:  0   -1px @color;
  box-shadow+:  1px  0   @color;
  box-shadow+: -1px  0   @color;
}
.rotate(...) {
  .prefixer(transform; ~"rotate(@{arguments}deg)"; webkit);
}
.scale(@x; @y: @x) {
  .prefixer(transform, scale(@x, @y), webkit);
}
.scale3d(@x; @y: @x; @z: 1) {
  .prefixer(transform, scale3d(@x, @y, @z), webkit);
}
.translate(@x; @y: @x) {
  .prefixer(transform, translate(@x, @y), webkit);
}
.translate3d(@x; @y: @x; @z: 1) {
  .prefixer(transform, translate3d(@x, @y, @z), webkit);
}
.translateZ(...) {
  .prefixer(transform, translateZ(@arguments), webkit);
}
.transform-origin(...) {
  .prefixer(transform-origin, @arguments, webkit);
}
.transform(...) {
  .for(@arguments); .-each(@argument) {
      -webkit-transform+_: @argument;
              transform+_: @argument;
  }
}
.animation(...) {
  -webkit-animation: @arguments;
          animation: @arguments;
}
.animation-bezier(@x1, @y1, @x2, @y2) {
  -webkit-animation-timing-function: cubic-bezier(@x1, @y1, @x2, @y2);
          animation-timing-function: cubic-bezier(@x1, @y1, @x2, @y2);
}

@keyframes in-bounce {
  0%, 100%, 20%, 40%, 60%, 80% {
    -webkit-transition-timing-function: cubic-bezier(0.215,.61,.355,1);
  }
  0%   { -webkit-transform: scale3d(.3,.3,.3); opacity: 0; }
  20%  { -webkit-transform: scale3d(1.13,1.13,1.13); }
  40%  { -webkit-transform: scale3d(.87,.87,.87); opacity: 1;}
  60%  { -webkit-transform: scale3d(1.05,1.05,1.05); }
  80%  { -webkit-transform: scale3d(.95,.95,.95); }
  100% { -webkit-transform: scale3d(1,1,1); opacity: 1;}
}
@-webkit-keyframes in-bounce {
  0%, 100%, 20%, 40%, 60%, 80% {
    -webkit-transition-timing-function: cubic-bezier(0.215,.61,.355,1);
  }
  0%   { -webkit-transform: scale3d(.3,.3,.3); opacity: 0; }
  20%  { -webkit-transform: scale3d(1.13,1.13,1.13); }
  40%  { -webkit-transform: scale3d(.87,.87,.87); opacity: 1;}
  60%  { -webkit-transform: scale3d(1.05,1.05,1.05); }
  80%  { -webkit-transform: scale3d(.95,.95,.95); }
  100% { -webkit-transform: scale3d(1,1,1); opacity: 1;}
}







.tip(@position: top, @tip_color: fade(@black, 34)) {
  .process (@t1: 0, @t2: 0, @t: auto, @l: auto, @b: auto, @r: auto, @mt: 0, @ml: 0, @mb: 0, @mr: 0) {
    &[data-tooltip] {
      position: relative;
      &:after {
        // .translate(@t1, @t2);
        -webkit-transform: translate(@t1, @t2);
        transform: translate(@t1, @t2);
        position: absolute;
        top: @t;
        left: @l;
        bottom: @b;
        right: @r;
        z-index: @zindex_tooltip;
        visibility: hidden;
        transition: visibility 0ms 200ms, background 200ms 0ms, margin 200ms 0ms, color 200ms 0ms;
        pointer-events: none;
        content: attr(data-tooltip);
        padding: .5em 1em;
        // border-radius: 2em;
        background: fade(@tip_color, 0);
        white-space: nowrap;
        color: fade(@white, 0);
      }
      &:hover {
        &:after {
          color: @white;
          background: @tip_color;
          visibility: visible;
          margin: @mt @mr @mb @ml;
          transition: visibility 0ms 0ms, background 100ms 1000ms, margin 100ms 1000ms, color 100ms 1000ms;
        }
      }
    }
  }
  .process_top (@arguments) when (@position = top) {
    .process(@t1: -50%, @l: 50%, @b: 100%, @mb: .5em);
  }
  .process_left (@arguments) when (@position = left) {
    .process(@t2: -50%, @t: 50%, @r: 100%, @mr: .5em);
  }
  .process_bottom (@arguments) when (@position = bottom) {
    .process(@t1: -50%, @t: 100%, @l: 50%, @mt: .5em);
  }
  .process_right (@arguments) when (@position = right) {
    .process(@t2: -50%, @t: 50%, @l: 100%, @ml: .5em);
  }
  .process_top(@arguments);
  .process_left(@arguments);
  .process_bottom(@arguments);
  .process_right(@arguments);
}

