.for(@i, @n) {.-each(@i)}
.for(@n)     when (isnumber(@n)) {.for(1, @n)}
.for(@i, @n) when not (@i = @n)  {
    .for((@i + (@n - @i) / abs(@n - @i)), @n);
}
.for(@array)   when (default()) {.for-impl_(length(@array))}
.for-impl_(@i) when (@i > 1)    {.for-impl_((@i - 1))}
.for-impl_(@i) when (@i > 0)    {.-each(extract(@array, @i))}

.prefixer(@property; @value; @rest...) {
  .prefix(@property; @value; @rest; @counter: length(@rest)) when (@counter > 0) {
    .prefix(@property; @value; @rest; (@counter - 1));
    @prefix: extract(@rest, @counter);
    -@{prefix}-@{property}: @value;
  }.prefix(@property; @value; @rest);
  @{property}: @value;
}
.prefixer_value(@property; @value; @rest...) {
  .prefix(@property; @value; @rest; @counter: length(@rest)) when (@counter > 0) {
    .prefix(@property; @value; @rest; (@counter - 1));
    @prefix: extract(@rest, @counter);
    @{property}: ~"-@{prefix}-@{value}";
  }.prefix(@property; @value; @rest);
  @{property}: @value;
}
.placeholder_style(@property; @value) {
  &::-webkit-input-placeholder {@{property}: @value;}
  &:-moz-placeholder           {@{property}: @value;}
  &::-moz-placeholder          {@{property}: @value;}
}
.scrollbar_hide() {
  &::-webkit-scrollbar {
    width: 0; // we should calculate to get this effect in the dom
  }
}
.icon_stroke(...) {
  .icon_stroke_color(@a) when (iscolor(@a)) {
    i {
      [class*="stroke"] {
        stroke: @arguments;
      }
    }
  }.icon_stroke_color(@arguments);
}
.icon_fill(...) {
  .icon_fill_color(@a) when (iscolor(@a)) {
    i {
      [class*="fill"] {
        fill: @arguments;
      }
    }
  }.icon_fill_color(@arguments);
}
.box-sizing(...) {
  .prefixer(box-sizing, @arguments, webkit moz);
}
.user-select(...) {
  .prefixer(user-select, @arguments, webkit moz);
}
.to_em(@a) when (ispixel(@a)) {
  @concat: (unit(@a) / unit(@font_size));
  @to_em: ~"@{concat}em";
}
.random_cascade(@c) when (@c > 0) {
  .random_cascade((@c - 1));
  @random: `Math.random()`;
  &:nth-of-type(@{c}) {
    transition-delay: round(@cascade * (@random * 10));
  }
}
.button_icon_cascade(@c) when (@c > 0) {
  .button_icon_cascade((@c - 1));
  &:nth-of-type(@{c}) {
    i {
      transition-delay: (@cascade * @c);
    }
  }
}
.button_fade_cascade(@c) when (@c > 0) {
  .button_fade_cascade((@c - 1));
  &:nth-of-type(@{c}) {
    object {
      transition-delay: (@cascade * 5) + (@cascade * @c);
    }
  }
}
.outline(@color: @gray_lighter) {
  box-shadow+:  0    1px @color;
  box-shadow+:  0   -1px @color;
  box-shadow+:  1px  0   @color;
  box-shadow+: -1px  0   @color;
}
.filter(...) {
  .for(@arguments); .-each(@argument) {
      -webkit-filter+_: @argument;
              filter+_: @argument;
  }
}
.gradient(@type; @rest...) {
  @colors: ~`"@{rest}".slice(1,-1)`;
  background-image: linear-gradient(@type, @colors);
}
.rotate(...) {
  .prefixer(transform; ~"rotate(@{arguments}deg)"; webkit);
}
.scale(@x; @y: @x) {
  .prefixer(transform, scale(@x, @y), webkit);
}
.scale3d(@x; @y: @x; @z: 1) {
  .prefixer(transform, scale3d(@x, @y, @z), webkit);
}
.translate(@x; @y: @x) {
  .prefixer(transform, translate(@x, @y), webkit);
}
.translate3d(@x; @y: @x; @z: 1) {
  .prefixer(transform, translate3d(@x, @y, @z), webkit);
}
.translateZ(...) {
  .prefixer(transform, translateZ(@arguments), webkit);
}
.transform-origin(...) {
  .prefixer(transform-origin, @arguments, webkit);
}
.transform(...) {
  .for(@arguments); .-each(@argument) {
      -webkit-transform+_: @argument;
              transform+_: @argument;
  }
}
.animation(...) {
  -webkit-animation: @arguments;
          animation: @arguments;
}
.animation-bezier(...) {
  -webkit-animation-timing-function: @arguments;
          animation-timing-function: @arguments;
}

@keyframes in-bounce {
  0%, 100%, 20%, 40%, 60%, 80% {
    transition-timing-function: cubic-bezier(0.215,.61,.355,1);
    transform-origin: center;
  }
  0%   { transform: scale3d(.3,.3,.3); opacity: 0; }
  20%  { transform: scale3d(1.13,1.13,1.13); }
  40%  { transform: scale3d(.87,.87,.87); opacity: 1;}
  60%  { transform: scale3d(1.05,1.05,1.05); }
  80%  { transform: scale3d(.95,.95,.95); }
  100% { transform: scale3d(1,1,1); opacity: 1;}
}
@-webkit-keyframes in-bounce {
  0%, 100%, 20%, 40%, 60%, 80% {
    -webkit-transition-timing-function: cubic-bezier(0.215,.61,.355,1);
    -webkit-transform-origin: center;
  }
  0%   { -webkit-transform: scale3d(.3,.3,.3); opacity: 0; }
  20%  { -webkit-transform: scale3d(1.13,1.13,1.13); }
  40%  { -webkit-transform: scale3d(.87,.87,.87); opacity: 1;}
  60%  { -webkit-transform: scale3d(1.05,1.05,1.05); }
  80%  { -webkit-transform: scale3d(.95,.95,.95); }
  100% { -webkit-transform: scale3d(1,1,1); opacity: 1;}
}

@keyframes in-fade {
  0%   {opacity: 0;}
  100% {opacity: 1;}
}
@-webkit-keyframes in-fade {
  0%   {opacity: 0;}
  100% {opacity: 1;}
}

@keyframes in-fade-left {
  0%   { opacity: 0; transform: translate3d(-50%, 0, 0);}
  100% { opacity: 1; transform: none;}
}
@-webkit-keyframes in-fade-left {
  0%   { opacity: 0; -webkit-transform: translate3d(-50%, 0, 0);}
  100% { opacity: 1; -webkit-transform: none;}
}
@keyframes in-fade-right {
  0%   { opacity: 0; transform: translate3d(50%, 0, 0);}
  100% { opacity: 1; transform: none;}
}
@-webkit-keyframes in-fade-right {
  0%   { opacity: 0; -webkit-transform: translate3d(50%, 0, 0);}
  100% { opacity: 1; -webkit-transform: none;}
}
@keyframes in-fade-top {
  0%   { opacity: 0; transform: translate3d(0, -33%, 0);}
  100% { opacity: 1; transform: none;}
}
@-webkit-keyframes in-fade-top {
  0%   { opacity: 0; -webkit-transform: translate3d(0, -33%, 0);}
  100% { opacity: 1; -webkit-transform: none;}
}
@keyframes in-fade-bottom {
  0%   { opacity: 0; transform: translate3d(0, 33%, 0);}
  100% { opacity: 1; transform: none;}
}
@-webkit-keyframes in-fade-bottom {
  0%   { opacity: 0; -webkit-transform: translate3d(0, 33%, 0);}
  100% { opacity: 1; -webkit-transform: none;}
}

@keyframes dot {
  0%   {opacity: 0;}
  50%   {opacity: 0;}
  100% {opacity: 1;}
}
@-webkit-keyframes dot {
      0% { opacity: 0; }
     50% { opacity: 0; }
    100% { opacity: 1; }
}
