.mobile-hidden {
  .mq_640({
    display: none !important;
  });
}

// Palette Settings //
@sections:    020;  // Evenly distributed hues, should be a divisor of spectrum
@spectrum:    360;  // Should be 360, see wikipedia.org/wiki/HSL_and_HSV
@starting:    005;  // Starting position on specturm, keep small to start at red

// Palette Blending //
@saturant:    66%;  // Saturation applied to each base color
@strength:    99%;  // Lightness applied to each base color
@compound:    33%;  // Tinge blended into each base color
@softness:    13%;  // Lighten applied to each soft color
@darkness:    21%;  // Black overlaid to balance lighten
@deepness:    21%;  // Darken applied to each deep color
@liteness:    21%;  // White overlaid to balance darken

// Palette Pigments //
@hue_roja:    00;   // Integer > 0
@hue_oran:    01;   // Distributed integer
@hue_yell:    03;   // Distributed integer
@hue_gree:    06;   // Distributed integer
@hue_cyan:    09;   // Distributed integer
@hue_blue:    11;   // Distributed integer
@hue_purp:    15;   // Distributed integer
@hue_pink:    17;   // Integer < "sections"

@red_base:    hsv(@starting + (@hue_roja * (@spectrum / @sections)), @saturant, @strength);
@orange_base: hsv(@starting + (@hue_oran * (@spectrum / @sections)), @saturant, @strength);
@yellow_base: hsv(@starting + (@hue_yell * (@spectrum / @sections)), @saturant, @strength);
@green_base:  hsv(@starting + (@hue_gree * (@spectrum / @sections)), @saturant, @strength);
@cyan_base:   hsv(@starting + (@hue_cyan * (@spectrum / @sections)), @saturant, @strength);
@blue_base:   hsv(@starting + (@hue_blue * (@spectrum / @sections)), @saturant, @strength);
@purple_base: hsv(@starting + (@hue_purp * (@spectrum / @sections)), @saturant, @strength);
@pink_base:   hsv(@starting + (@hue_pink * (@spectrum / @sections)), @saturant, @strength);

@red:         softlight(@red_base,    fade(@tinge, @compound));
@orange:      softlight(@orange_base, fade(@tinge, @compound));
@yellow:      softlight(@yellow_base, fade(@tinge, @compound));
@green:       softlight(@green_base,  fade(@tinge, @compound));
@cyan:        softlight(@cyan_base,   fade(@tinge, @compound));
@blue:        softlight(@blue_base,   fade(@tinge, @compound));
@purple:      softlight(@purple_base, fade(@tinge, @compound));
@pink:        softlight(@pink_base,   fade(@tinge, @compound));

@red_soft:    overlay(lighten(@red,    @softness), fade(@black, @darkness));
@orange_soft: overlay(lighten(@orange, @softness), fade(@black, @darkness));
@yellow_soft: overlay(lighten(@yellow, @softness), fade(@black, @darkness));
@green_soft:  overlay(lighten(@green,  @softness), fade(@black, @darkness));
@cyan_soft:   overlay(lighten(@cyan,   @softness), fade(@black, @darkness));
@blue_soft:   overlay(lighten(@blue,   @softness), fade(@black, @darkness));
@purple_soft: overlay(lighten(@purple, @softness), fade(@black, @darkness));
@pink_soft:   overlay(lighten(@pink,   @softness), fade(@black, @darkness));

@red_deep:    overlay( darken(@red,    @deepness), fade(@white, @liteness));
@orange_deep: overlay( darken(@orange, @deepness), fade(@white, @liteness));
@yellow_deep: overlay( darken(@yellow, @deepness), fade(@white, @liteness));
@green_deep:  overlay( darken(@green,  @deepness), fade(@white, @liteness));
@cyan_deep:   overlay( darken(@cyan,   @deepness), fade(@white, @liteness));
@blue_deep:   overlay( darken(@blue,   @deepness), fade(@white, @liteness));
@purple_deep: overlay( darken(@purple, @deepness), fade(@white, @liteness));
@pink_deep:   overlay( darken(@pink,   @deepness), fade(@white, @liteness));

.message { // only for testings colors in order
  &:nth-child(01)>span:first-child{color: @red_soft !important;}
  &:nth-child(02)>span:first-child{color: @orange_soft !important;}
  &:nth-child(03)>span:first-child{color: @yellow_soft !important;}
  &:nth-child(04)>span:first-child{color: @green_soft !important;}
  &:nth-child(05)>span:first-child{color: @cyan_soft !important;}
  &:nth-child(06)>span:first-child{color: @blue_soft !important;}
  &:nth-child(07)>span:first-child{color: @purple_soft !important;}
  &:nth-child(08)>span:first-child{color: @pink_soft !important;}

  &:nth-child(09)>span:first-child{color: @red !important;}
  &:nth-child(10)>span:first-child{color: @orange !important;}
  &:nth-child(11)>span:first-child{color: @yellow !important;}
  &:nth-child(12)>span:first-child{color: @green !important;}
  &:nth-child(13)>span:first-child{color: @cyan !important;}
  &:nth-child(14)>span:first-child{color: @blue !important;}
  &:nth-child(15)>span:first-child{color: @purple !important;}
  &:nth-child(16)>span:first-child{color: @pink !important;}

  &:nth-child(17)>span:first-child{color: @red_deep !important;}
  &:nth-child(18)>span:first-child{color: @orange_deep !important;}
  &:nth-child(19)>span:first-child{color: @yellow_deep !important;}
  &:nth-child(20)>span:first-child{color: @green_deep !important;}
  &:nth-child(21)>span:first-child{color: @cyan_deep !important;}
  &:nth-child(22)>span:first-child{color: @blue_deep !important;}
  &:nth-child(23)>span:first-child{color: @purple_deep !important;}
  &:nth-child(24)>span:first-child{color: @pink_deep !important;}
}
