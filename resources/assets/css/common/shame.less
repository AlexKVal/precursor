.mobile-hidden {
  .mq_640({
    display: none !important;
  });
}


[id|="twitter-widget"] {
  width: 100% !important;
  max-width: 100% !important;
  margin: 1rem 0 !important;
}
.twitter-tweet {
  &:not(:empty) {
    .flexy(center);
    font-size: inherit;
    font-weight: inherit;
    min-height: (186px - 24);
    margin: 1em 0;
    padding: 1.25rem 0 1.250rem 1.875rem;
    border-color: #eee #ddd #bbb;
    border-radius: 5px;
    border-style: solid;
    border-width: 1px;
    box-shadow: 0 1px 3px fade(@black, 15);
    a {
      &:before {
        content: attr(data-loading-tweet);
      }
      &:after {
        .animation(tweet-load @run_slow @bezier_fadein 3s both);
        content: attr(data-failed-tweet);
      }
    }
  }
}
@keyframes tweet-load {
 0%   {opacity: 0;}
 100% {opacity: 1;}
}
@-webkit-keyframes tweet-load {
 0%   {opacity: 0;}
 100% {opacity: 1;}
}
span {
 > i {
   > .iconpile {
     height: .75em;
     width: .75em;
     [class|="stroke"] {
       stroke-width: 12;
     }
   }
 }
}

// Palette Settings //
@sections:     20;  // Evenly distributed hues, should be a divisor of spectrum
@spectrum:    360;  // Should be 360, see wikipedia.org/wiki/HSL_and_HSV
@starting:      5;  // Starting position on specturm, keep small to start at red

// Palette Blending //
@saturant:    66%;  // Saturation applied to each base color
@strength:    99%;  // Lightness applied to each base color
@compound:    33%;  // Tinge blended into each base color
@softness:    13%;  // Lighten applied to each soft color
@darkness:    21%;  // Black overlaid to balance lighten
@deepness:    21%;  // Darken applied to each deep color
@liteness:    21%;  // White overlaid to balance darken

// Palette Pigments //
@hue_roja:    00;   // Integer > 0
@hue_oran:    01;   // Distributed integer
@hue_yell:    03;   // Distributed integer
@hue_gree:    06;   // Distributed integer
@hue_cyan:    09;   // Distributed integer
@hue_blue:    11;   // Distributed integer
@hue_purp:    15;   // Distributed integer
@hue_pink:    17;   // Integer < "sections"

@red_base:    hsv(@starting + (@hue_roja * (@spectrum / @sections)), @saturant, @strength);
@orange_base: hsv(@starting + (@hue_oran * (@spectrum / @sections)), @saturant, @strength);
@yellow_base: hsv(@starting + (@hue_yell * (@spectrum / @sections)), @saturant, @strength);
@green_base:  hsv(@starting + (@hue_gree * (@spectrum / @sections)), @saturant, @strength);
@cyan_base:   hsv(@starting + (@hue_cyan * (@spectrum / @sections)), @saturant, @strength);
@blue_base:   hsv(@starting + (@hue_blue * (@spectrum / @sections)), @saturant, @strength);
@purple_base: hsv(@starting + (@hue_purp * (@spectrum / @sections)), @saturant, @strength);
@pink_base:   hsv(@starting + (@hue_pink * (@spectrum / @sections)), @saturant, @strength);

@red:         softlight(@red_base,    fade(@tinge, @compound));
@orange:      softlight(@orange_base, fade(@tinge, @compound));
@yellow:      softlight(@yellow_base, fade(@tinge, @compound));
@green:       softlight(@green_base,  fade(@tinge, @compound));
@cyan:        softlight(@cyan_base,   fade(@tinge, @compound));
@blue:        softlight(@blue_base,   fade(@tinge, @compound));
@purple:      softlight(@purple_base, fade(@tinge, @compound));
@pink:        softlight(@pink_base,   fade(@tinge, @compound));

@red_soft:    overlay(lighten(@red,    @softness), fade(@black, @darkness));
@orange_soft: overlay(lighten(@orange, @softness), fade(@black, @darkness));
@yellow_soft: overlay(lighten(@yellow, @softness), fade(@black, @darkness));
@green_soft:  overlay(lighten(@green,  @softness), fade(@black, @darkness));
@cyan_soft:   overlay(lighten(@cyan,   @softness), fade(@black, @darkness));
@blue_soft:   overlay(lighten(@blue,   @softness), fade(@black, @darkness));
@purple_soft: overlay(lighten(@purple, @softness), fade(@black, @darkness));
@pink_soft:   overlay(lighten(@pink,   @softness), fade(@black, @darkness));

@red_deep:    overlay( darken(@red,    @deepness), fade(@white, @liteness));
@orange_deep: overlay( darken(@orange, @deepness), fade(@white, @liteness));
@yellow_deep: overlay( darken(@yellow, @deepness), fade(@white, @liteness));
@green_deep:  overlay( darken(@green,  @deepness), fade(@white, @liteness));
@cyan_deep:   overlay( darken(@cyan,   @deepness), fade(@white, @liteness));
@blue_deep:   overlay( darken(@blue,   @deepness), fade(@white, @liteness));
@purple_deep: overlay( darken(@purple, @deepness), fade(@white, @liteness));
@pink_deep:   overlay( darken(@pink,   @deepness), fade(@white, @liteness));

@palette_colors:
  ~"red",    @red,
  ~"orange", @orange,
  ~"yellow", @yellow,
  ~"green",  @green,
  ~"cyan",   @cyan,
  ~"blue",   @blue,
  ~"purple", @purple,
  ~"pink",   @pink;

.palette(@a; @c: length(@a); @x: -1; @y: 0) when (@c > (length(@a) / 2)) {
  .palette(@a; (@c - 1); (@x - 1); (@y - 1));
  @n: extract(@a, (@c + @x));
  .@{n} {
    color: extract(@a, (@c + @y));
    [class|="stroke"]{stroke: extract(@a, (@c + @y));}
    [class|="fill"]  {fill:   extract(@a, (@c + @y));}
  }
}.palette(@palette_colors);
