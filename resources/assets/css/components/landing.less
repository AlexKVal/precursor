.landing {
  user-select: none;
  .animate_landing_features();
  &:active {
    .make-button {
      &:not(:active) {
        pointer-events: none;
      }
    }
  }
  &.page {
    padding: 0;
    .the-why {
      padding-top: @tile;
    }
    .the-what {
      padding-bottom: @tile;
    }
  }
}
.the-why,
.the-what {
  .selection(@white; 08);
  .flexy(column);
  min-height: 100vh;
  overflow: hidden;
  span {
    user-select: auto;
  }
  .calls-to-action {
    margin-top: 1rem;
  }
}
.the-why {
  .our-proof {
    .flexy(center; center);
    color: @gray_light;
    box-shadow: 0 -8px 13px fade(@black,21);
  }
}
.the-what {
  .our-proof {
    box-shadow: 0 8px 13px fade(@black,21);
    display: none !important; // keep bottom one empty until we good proof
  }
  .google-login {
    .mq_640({
      width: 100%;
    });
  }
  .google-text {
    .mq_640({
      width: 100%;
      height: @tile;
      margin: 0 @tile 0 0;
      padding: 1.125rem 0;
    });
  }
}
// TODO this whole make button can be done much simpler, and work with any background color
.make-button {
  .flexy(center; center);
  position: relative;
  line-height: 1em;
  min-width: @tile * 4;
  height: @tile;
  padding: 0 @padding_outer;
  border: 2px solid @white;
  cursor: pointer;
  overflow: hidden;
  .mq_640({
    width: 100%;
  });
  &:after {
    .gradient(to bottom, @white 0%, fade(@white, 0) 15%, fade(@white, 0) 85%, @white 100%);
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
  }
  &:hover {
    .something-default {
      opacity: 0;
    }
    .something-wheel {
      &:before,
      &:after {
        animation: out-fade (1.5 * @run_make_button) forwards;
        color: @gray_dark;
        position: absolute;
        left: 0;
        min-width: 100%;
        min-height: 100%;
        word-spacing: @tile_xl;
        white-space: pre-line;
        padding: .25em 0;
      }
      &:before {
        content: "easter_egg " attr(data-before);
        bottom: 100%;
      }
      &:after {
        content: attr(data-after);
        top: 100%;
      }
    }
  }
  &:not(:hover) {
    .something-wheel {
      animation-name: none;
    }
  }
  &.alt {
    order: 2;
    color: fade(@white, (100 * @opacity_darker_gray));
    margin-left: @tile / 2;
    border: 2px dotted fade(@white, (100 * @opacity_darker_dark));
    .mq_640({
      display: none;
    });
    &:hover {
      color: @white;
      border: 2px solid @white;
      transition-duration: @run_fast;
      .something-wheel {
        &:before,
        &:after {
          color: fade(@white, (100 * @opacity_darker_dark));
        }
      }
      ~ .pancake-button {
        color: fade(@white, (100 * @opacity_darker_gray));
        border: 2px dotted fade(@white, (100 * @opacity_darker_dark));
        transition-duration: @now;
      }
    }
    .make-prepend,
    .make-append {
      text-transform: lowercase;
      &:before {
        content: attr(data-before);
        text-transform: none;
      }
    }
    .make-something {
      .flexy(center);
      height: @tile;
      mask-image: linear-gradient(to bottom, fade(@black, 0), @black, @black, fade(@black, 0));
    }
    .something-default {
      &:after {
        display: none;
      }
    }
    .something-wheel {
      bottom: 0;
      height: @tile / 4;
      margin: auto 0;
    }
    ~ .pancake-button {
      order: 1;
    }
  }
  &:not(.alt) {
    color: @white;
    transition: @run @bezier_fadein;
    &:hover,
    &:focus,
    &:active {
      color: @black;
      background-color: @white;
      border-color: @white;
      transition-duration: @now;
      &:after {
        opacity: 1;
      }
    }
  }
}
.make-something {
  position: relative;
  height: 1em;
}
.something-default,
.something-wheel {
  white-space: pre;
}
.something-default {
  visibility: hidden;
  transition: width @run_fast @bezier_deform;
  &:after {
    content: ".";
    visibility: visible;
  }
}
.something-wheel {
  animation: something-wheel @run_make_button;
  text-align: left;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  padding-bottom: 1px;
}
.make-prepend,
.make-append {
  white-space: pre;
}
.our-claim {
  .flexy(column);
  flex: 1;
  position: relative;
  color: fade(@white, (100 * @opacity_darker_light));
  padding: @menu_padding 0;
}
.our-philosophy-wrap {
  flex: 1;
  .flexy(center);
}
.our-philosophy {
  flex: 1;
  .flexy(column);
}
.our-proof {
  height: 0;
  background: @dye_outer;
  transition: height @run_slow;
  transition-timing-function: @bezier_bounce;
}
.the-how {
  position: relative;
  background: @dye_outer;
}
.landing-learn-back {
  height: 0;
  background: @dye_outer;
  transition-timing-function: @bezier_bounce;
  &.show {
    height: @tile;
    transition-delay: @now;
    + .landing-learn-front {
      a {
        &:hover {
          color: @color_select;
        }
      }
      // kill after ph discount is done
      .dn-discount {
        .icon(fill; @color_dn);
        &:hover {
          .icon(fill; @color_dn);
        }
      }
    }
  }
}
.landing-learn-front {
  .flexy(center; center);
  animation: in-fade-bottom-soft @run_slower @run_slower @bezier_fadein backwards;
  &:not(.show) {
    opacity: 0;
    pointer-events: none;
    transition-delay: @now;
  }
  a {
    color: @gray_dark;
    line-height: 1;
    text-align: center;
    width: 2 * @tile;
    padding: @menu_padding 0;
    &:hover {
      color: @white;
    }
  }
}
.landing-learn-back,
.landing-learn-front {
  position: absolute;
  bottom: 100%;
  left: 0;
  width: 100%;
  transition: @run_slow @run_slow;
  // unblock this media query when ph discount ends
  // .mq_640({
  //   display: none;
  // });
  // kill this when ph discount ends
  &:not(.dn-override) {
    .mq_640({
      display: none;
    });
  }
  &.dn-override {
      opacity: 1 !important;
      pointer-events: auto !important;
    .mq_640({
      .icon(fill; @color_ph);
      top: 0;
      bottom: auto;
    });
  }
}
.feature {
  .flexy(wrap);
  align-items: center;
  padding: 10% 0;
  transition: padding @run_slower;
  .mq_1280({
    padding: 15% 0;
  });
  .mq_960({
    padding: 20% 0;
  });
  .mq_640({
    padding: 25% 0;
  });
  &:not(.art-visible) {
    .artwork {
      display: none;
    }
  }
  .art-frame {
    position: relative;
    width: 100%;
    height: 0;
    padding-bottom: @art_mobile_height;
  }
}
.feature-divider {
  position: relative;
  width: 100%;
  border-bottom: 1px dashed @gray_light;
  .mq_640({
    border-bottom: 1px solid @gray_light;
  });
  &:before {
    .gradient(to right, @white, fade(@white, 0), @white);
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 1px;
    .mq_640({
      display: none;
    });
  }
}
.feature-story {
  order: 2;
  flex: 1;
  padding: 0 @menu_padding;
  .mq_640({
    margin-bottom: auto;
    z-index: 1;
    background: @dye_outer;
    box-shadow: 0 -5px 13px @dye_outer;
  });
}
.feature-headline {
  overflow: hidden;
  text-overflow: ellipsis;
  .mq_640({
    font-size: 2.5em;
  });
  span {
    user-select: auto;
  }
}
.feature-link {
  display: inline-block;
  position: relative;
  border-bottom: 1px dotted @gray_light;
  white-space: nowrap;
  user-select: auto;
  .mq_640({
    display: block;
    padding: 1.2rem;
    text-align: center;
    border: 1px solid @gray_light;
  });
  &:hover {
    .mq_640({
      background: @gray_light;
      color: @black;
    });
    &:after {
      .mq_640({
        display: none;
      });
    }
  }
  &:not(:hover) {
    &:after {
      width: 0;
      left: 50%;
      transition-duration: @run;
    }
  }
  &:active {
    &:after {
      left: -5%;
      width: 110%;
      transition: @now;
    }
  }
  &:after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    box-shadow: 0 1px @color_select;
    transition: @run_fast @bezier_deform;
  }
}
.feature-media {
  order: 3;
  width: 34%;
  padding: 0 @menu_padding;
  .mq_960({
    width: 50%;
  });
  .mq_640({
    width: 100%;
    margin-top: auto;
    padding: @menu_padding 25%;
  });
  &.reverse {
    order: 1;
  }
  &:not(.reverse) {
    .mq_640({
      order: 1;
    });
  }
}
