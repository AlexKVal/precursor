.canvas {
  .flex(1);
  position: relative;
  &:active {
    + .chat {
      .chat-window {
        .user-select(none);
        pointer-events: none;
      }
    }
  }
  &:not(:active) {
    &:not(:hover) {
      .user-select(none);
    }
  }
}
.canvas-background {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: @dye_inner;
  will-change: transform;
  transition: @run @bezier_deform;
}
.canvas-frame {
  .user-select(none);
  .transform-origin(0 0);
  position: relative;
  transition+: all @run_slow @now @bezier_deform;
  transition+: width @now @run_slower @bezier_deform;
  transition+: height @now @run_slower @bezier_deform;
  will-change: transform;
  &:not(:hover) {
    ~ .radial-tip {
      display: none;
    }
  }
  top: 0;
  left: 0;
  cursor: crosshair;
  &.tool-text {
    cursor: text;
  }
  &.tool-select {
    cursor: default;
  }
  &.tool-text-move {
    cursor: move;
    .text-layer-input {
      cursor: move;
    }
  }
  &.arrow-tool {
    cursor: e-resize;
  }
  .arrow-handle-group {
    transition: @run @bezier_deform;
    opacity: 0;
    cursor: e-resize;
    &:hover {
      opacity: 1;
    }
  }
}
.grid-lines-large {
  fill: none;
  stroke: @white;
  stroke-width: 1;
  opacity: @opacity_darker_dark * .75;
}
.grid-lines-small {
  fill: none;
  stroke: @white;
  stroke-width: .5;
  opacity: @opacity_darker_dark;
}
.layers {
  &.live {
    &.layer-handle {
      ~ .layer-outline {
        transition-delay: @run_fast;
      }
    }
  }
  .layer-deleted {
    &.layer-outline {
      .animation(layer-deleted (2 * @run_slower) @run_slower @bezier_deform);
      pointer-events: none;
    }
  }
}
.selectable-group {
  .layer-handle {
    stroke: transparent;
    stroke-width: 20;
    &:hover {
      ~ .layer-outline {
        stroke: @white;
        stroke-width: 4;
        transition-duration: @run_fast;
        &.selected {
          stroke: @color_select_hover;
        }
      }
    }
  }
}
.shape-layer {
  stroke: none;
  fill: none;
  &.signup-layer {
    fill: transparent;
    cursor: pointer;
  }
  &.layer-in-progress {
    stroke: @color_select;
    stroke-width: 2;
    &.selection {
      stroke: @white;
      stroke-width: 1;
    }
  }
  &.interactive-fill {
    &:not(.invalid) {
      fill: transparent;
      cursor: pointer;
    }
    &.selected {
      cursor: move;
    }
  }
  &.layer-outline {
    stroke: @gray_light;
    stroke-width: 2;
    pointer-events: none;
    transition: @run @bezier_deform;
    &.selected {
      stroke-width: 2;
      stroke: @color_select;
    }
  }
}

.text-layer {
  .user-select(none);
  fill: @gray_light;
  transition: @run @bezier_deform;
  &.editable {
    &:hover {
      fill: @color_select_hover;
    }
  }
  &.selected {
    fill: @color_select;
  }
  &.layer-in-progress {
    fill: @color_select;
    stroke-opacity: 1;
  }
  &.interactive-fill {
    &:not(.invalid) {
      cursor: pointer;
    }
    &.selected {
      cursor: move;
    }
  }
}
.static {
  .interactive-fill {
    display: none;
  }
}
.selectable-group {
  &:hover {
    .text-layer {
      fill: @color_select_hover;
      &.selected {
        fill: @color_select;
      }
    }
  }
}
.mouse-tool {
  fill: none;
  stroke-width: 8;
}
.action-info {
  margin-top: auto;
}
.svg-text-form {
  input[type="text"] {
    .placeholder_style(color; @gray);
    color: @color_select_hover;
    background: none;
    border: none;
    outline: none;
  }
}
.text-size-helper {
  fill: transparent;
}
.layer-properties {
  .flexy(column);
  width: @tile_menu_min;
  padding-top: 5px; // keeps adaptive placeholder from getting cut off
  .layer-property-id {
    background: @dye_inner;
    &:not(:focus) {
      box-shadow: 0 -1px @gray_dark inset;
      border-bottom-width: 0;
    }
  }
  .layer-property-target {
    background: @dye_inner;
    &:focus {
      border-top-color: transparent !important;
      box-shadow: 0 -1px @color_select;
      ~ .property-dropdown-targets {
        &:not(.expanded) {
          border-bottom-color: @color_select;
        }
      }
    }
    &:not(:focus) {
      border-top-color: transparent;
    }
    &.expanded {
      border-bottom-color: transparent;
    }
  }
}
.layer-property {
  .flexy(column);
}
.layer-property-button {
  font-size: 1.5em; // for ellipsis icon hack
  line-height: 0; // for ellipsis icon hack
  top: 0;
  right: 0;
  width: 3rem;
  height: 3rem;
  margin: -3rem 0 0 auto;
  padding-bottom: 1rem; // for ellipsis icon hack
  &:hover {
    color: @color_select;
  }
}
.property-dropdown-targets {
  .flexy(column);
  .scrollbar_hide(); // TODO we should calculate to get this effect in the dom
  max-height: (@tile * 5);
  background: @gray_darker;
  border: 1px solid @gray_dark;
  border-top: none;
  overflow-y: auto;
  transition: max-height @run_slow @bezier_deform;
  &:not(.expanded) {
    display: none;
    // transition keeps making the dropdown clip out of place :(
    // max-height: 0;
    // margin-top: -1px;
  }
  .property-dropdown-target {
    .flex(0 0 3em);
    color: @gray_light;
    line-height: 1em;
    padding: 1em;
    border: 1px solid transparent;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    transition+: color @run_fast @bezier_fadein;
    transition+: border @run_fast @bezier_fadein;
    transition+: text-indent @run @bezier_deform;
    &:hover {
      text-indent: 3px;
      border-color: @color_select;
      transition-duration+: @now;
      transition-duration+: @now;
      transition-duration+: @run;
    }
  }
}
.edit-handles {
  .edit-handle {
    fill: @color_select;
    transition: @run;
    &.bottom.right {
      cursor: nwse-resize;
    }
    &.top.left {
      cursor: nwse-resize;
    }
    &.bottom.left {
      cursor: nesw-resize;
    }
    &.top.right {
      cursor: nesw-resize;
    }
  }
}
.handle-outline {
  stroke: @color_select;
  stroke-dasharray: 1,1;
}
.radial-menu {
  position: fixed;
  width: @tile_radial;
  height: @tile_radial;
  z-index: @zindex_radial_menu;
  + .canvas-frame {
    .layer-properties {
      display: none;
    }
  }
}
.radial-buttons {
  width: @tile_radial + 2;
  height: @tile_radial + 2;
  margin-left: -1em;
  margin-top: -1em;
  padding: 1rem;
  overflow: visible;
}
.radial-button {
  cursor: pointer;
  transition: @run @bezier_deform;
  &:hover {
    .transform(translate3d(-13px, -13px, 0); scale3d(1.1, 1.1, 1));
    transition-duration: @run_fast;
    .radial-pie {
      fill: @gray_dark;
      transition-duration: @run_fast;
    }
    .radial-icon {
      stroke: @white;
      transition-duration: @run_fast;
    }
  }
  &:active {
    .radial-pie {
      fill: @gray_darker;
    }
  }
}
.radial-pie {
  fill: @gray_darker;
  stroke: @gray_dark;
  transition: @run @bezier_deform;
}
.radial-icon {
  .shape_position(@radial_tools);
  fill: none;
  stroke: @gray;
  stroke-width: 8;
  pointer-events: none;
  transition: @run @bezier_fadein;
}
.radial-point {
  fill: @gray_dark;
}
.radial-hint {
  .user-select(none);
  position: absolute;
  top: -@tile;
  left: -@tile;
  white-space: nowrap;
  .mq_640({
    display: none;
  });
}

.layer-arrows {
  line {
    stroke: @gray_light;
    stroke-width: 2;
  }
}
